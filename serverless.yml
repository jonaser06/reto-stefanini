service: estefanini-serverless

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "us-east-1"}
  environment:
    NODE_ENV: ${self:provider.stage}
    GALACTIC_WARRIORS_TABLE: ${self:custom.galacticWarriorsTable}
  apiGateway:
    usagePlan:
      quota:
        limit: 1000 # 1000 requests por día
        period: DAY
      throttle:
        rateLimit: 10 # 10 requests por segundo
        burstLimit: 20 # Hasta 20 requests en picos
    apiKeys:
      - name: galactic-warriors-api-key-${self:provider.stage}
        description: "API Key para Galactic Warriors API"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [GalacticWarriorsTable, Arn]

plugins:
  - serverless-esbuild
  - serverless-dynamodb-local
  - serverless-offline

custom:
  galacticWarriorsTable: galactic-warriors-${self:provider.stage}
  dynamodb:
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
    stages:
      - dev
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ["aws-sdk"]
    target: "node20"
    platform: "node"
    concurrency: 10

functions:
  fusionados:
    handler: src/fusionados/infrastructure/controllers/fusionados-controller.handler
    events:
      - http:
          path: fusionados
          method: get
          cors: true
          private: true # Requiere API Key y aplica rate-limiting

  almacenar:
    handler: src/almacenar/infrastructure/controllers/almacenar-controller.handler
    events:
      - http:
          path: almacenar
          method: post
          cors: true
          private: true # Requiere API Key y aplica rate-limiting

  historial:
    handler: src/historial/infrastructure/controllers/historial-controller.handler
    events:
      - http:
          path: historial
          method: get
          cors: true
          private: false # Historial público, sin rate-limiting estricto

resources:
  Resources:
    GalacticWarriorsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.galacticWarriorsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

